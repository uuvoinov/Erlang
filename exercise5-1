-module(my_db).
-author("uuvoinov").

-export([start/0, stop/0]).
-export([write/2, delete/1, read/1, match/1]).


start() -> register(db, spawn(my_db, loop, [[]])),
  ok.

stop() -> db ! {stop, self()},
  receive {reply, Reply} -> Reply
  end.

write(Key, Element) -> call({write, Key, Element}).

delete(Key) -> call({delete, Key}).

read(Key) -> call({read, Key}).

match(Element) -> call({match, Element}).


loop(DbData) ->
  receive
    {request, From, Message} ->
      {Reply, NewDbData} = handler(Message, DbData),
      reply(From, Reply),
      loop(NewDbData);
    {stop, From} -> reply(From, ok);
     _ -> {error, unknownMessage}
  end.

call(Message) -> db ! {request, self(), Message},
  receive {reply, Reply} -> Reply end.

reply(To, Message) -> To ! {reply, Message}.


handler({write, Key, Element}, DbData) ->
  {ok, [{Key, Element}|lists:keydelete(Key, 1, DbData)]};

handler({delete, Key}, DbData) ->
  {ok, lists:keydelete(Key, 1, DbData)};

handler({read, Key}, DbData) ->
  case lists:keyfind(Key, 1, DbData) of
    false -> {{error, instance}, DbData};
    {_, Element} -> {{ok, Element}, DbData}
  end;

handler({match, Element}, DbData) -> {[Key || {Key, El} <- DbData, El =:= Element], DbData}.
